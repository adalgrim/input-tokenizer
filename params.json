{"name":"Input Tokenizer","tagline":"jQuery plugin that allows a user to type keywords, which will be broken up into tokens/tags and displayed, similarly to tagging a post on Tumblr or Stack-Overflow.","body":"* *Features*: Optional autosuggest, custom callbacks, easy setup, custom CSS prefixing.\r\n* *Size*: 1.7kb gzipped, 4.1kb minified.\r\n* *Dependencies*: jQuery 1.8-2.0+. (I haven't tested below 1.8, but it might work...)\r\n\r\nIt's what you'd expect to see when tagging a post on Tumblr or Stack-Overflow. Mostly, I \r\njust wanted to do this myself, from scratch.\r\n\r\n- - -\r\n\r\n## Getting Started\r\n\r\nTo get started:\r\n\r\n* You'll need jQuery and this plugin. jQuery should be included first, \r\nand the path to the plugin will depend on where you put it. \r\nFor example, put this between the \\<head\\>\\</head\\> tags of your HTML:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\" ></script>\r\n<script type=\"text/javascript\" src=\"tokenizer.js\"></script>\r\n```\r\n\r\n* Next, copy my sample CSS or tweak it to your needs, then include it as well:\r\n\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"input_style.css\" />\r\n```\r\n\r\n* Finally, call the plugin on your input at the end of your \\<body\\>\\</body\\> tag \r\ncontents or once the page has loaded. If you've added the \".myTokenInput\" class \r\nto yours, you might do something like this:\r\n\r\n```html\r\n<script type=\"text/javascript\">\r\n\tvar tokenInput = $('input.myTokenInput').tokenizer({ /* options */ });\r\n</script>\r\n```\r\n\r\n* You're done! Mess around with the CSS if you want to restyle things a bit.\r\n\r\n- - -\r\n\r\n## Methods and Options\r\n\r\n* If you need to do real work with this plugin, you'll probably want to know the \r\nmethods and options. Here they are:\r\n\r\n```javascript\r\n// Initialize with default options\r\nvar $input = $(input).tokenizer({});\r\n\r\n// Initialize with some custom options:\r\nvar options = {\r\n\t/* custom options here */\r\n}\r\n$input2 = $(input2).tokenizer(options);\r\n\r\n```\r\n\r\nAvailable options:\r\n\r\n```javascript\r\n{\r\n\tsource: null, \t// autosuggest options. May be an array or a function.\r\n\t\t\t\t\t// If a function is given, it should take two parameters: \r\n\t\t\t\t\t// the first will be the input word, the second is a function which should be called\r\n\t\t\t\t\t// with a list of terms to suggest. (If you're using Ajax, call this function after your \r\n\t\t\t\t\t// response from the server is received, passing an array as the only parameter.)\r\n\r\n\tallowUnknownTags: true, // if false, prevents user from creating tags not on the autosuggest list\r\n\tnumToSuggest: 5, //number of options to show in autosuggest list. If 0, all results are shown.\r\n\t\r\n\r\n\txContent: '&times;', \t// content of the delete button\r\n\tnamespace: 'tknz', \t\t// used as class prefix for your CSS-styling pleasure.\r\n\tlabel: 'Tags:', \t\t// label at top of input\r\n\tplaceholder: '', \t\t// placeholder text shown inside the input\r\n\r\n\t\r\n\tseparators: [',', ' ', '.'],\t// trigger characters to separate tokens. \r\n\t\t\t\t  \t\t\t\t\t// \tUse [',', '.'] to allow multiple words per tag.\r\n\t\t\t\t  \t\r\n\tcallback: function ($input) {}, \t// function to call when the token list changes. \r\n\r\n\tonclick: function (word) {} \t// Function to call when a token is clicked. \r\n\t\t\t\t\t\t\t\t\t// Token text is passed as only parameter.\r\n}\r\n```\r\n\r\n\r\nAvailable methods:\r\n\r\n```javascript\r\n\r\n// 'get' - return list of tokens\r\nvar list = $input.tokenizer('get'); \t// ['unbought','stuffed','dogs']\r\n\r\n// 'push' - Manually add a token\r\n$input.tokenizer('push', 'YOLO'); // adds 'YOLO' as a token.\r\n\r\n// 'pop' - Get the most recent token\r\nvar lastToken = $input.tokenizer('pop'); // returns last token in list.\r\n\r\n// 'remove' - Manually remove a token\r\n$input.tokenizer('remove', 'YOLO'); // removes 'YOLO' from list.\r\n\r\n// 'empty' - Clear the input\r\n$input.tokenizer('empty'); // token list is now empty.\r\n\r\n// 'destroy' - Un-tokenize the input (returns everything to pre-plugin state)\r\n$input.tokenizer('destroy'); // just an everyday input now.\r\n\r\n// 'callback' - Manually trigger the callback function\r\n$input.tokenizer('callback'); // triggers provided callback, if any.\r\n\r\n\r\n```\r\n\r\n- - -\r\n\r\n## Other Notes\r\n\r\nIf this isn't what you need, there are other great options out there. Try these:\r\n\r\n* http://aehlke.github.com/tag-it/ (recommended)\r\n* http://xoxco.com/projects/code/tagsinput/\r\n* http://loopj.com/jquery-tokeninput/\r\n* http://tagedit.webwork-albrecht.de/\r\n\r\n- - -\r\n\r\n## Open Source License\r\n\r\nOpen source under MIT License (see below). I'd love to hear about it if you find a cool use for my code. Thanks! \r\n\r\n- - -\r\n\r\nThe MIT License (MIT)\r\nCopyright (c) 2013 Don McCurdy\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}